@page
@inject UserManager<UserEntity> UserManager
@inject SignInManager<UserEntity> SignInManager
@inject IWalletRepository walletRepository
@using EWallet.Domain.Data
@model EWallet.Domain.Models.Deposit

@{
    Layout = "_Layout";

    var user = await UserManager.GetUserAsync(User);
    var wallet = walletRepository.GetWalletById(user.WalletId);
}

<div>
    @if (SignInManager.IsSignedIn(User))
    {
        <h1>@UserManager.GetUserName(User)</h1>
        <h5>(User id: @UserManager.GetUserId(User))</h5>
        <p>Current balance: @wallet.CurrentBalance</p>

        <ul class="nav nav-pills nav-fill">
            <li class="nav-item">
                <a class="nav-link active" href="/Identity/Account/Wallet" aria-current="page">Deposit</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Identity/Account/Withdraw">Withdraw</a>
            </li>
        </ul>

        <form class="w-75" method="POST">
            <div class="mb-3 mt-4">
                <label class="form-label">Recipient ID</label>
                <input type="text" class="form-control RecipientId" id="exampleInputRecipient" placeholder="Enter an ID of the recipient">
            </div>
            <div class="mb-3 mt-4">
                <label class="form-label">Amount of money to deposit</label>
                <input type="number" class="form-control Amount" id="exampleInputAmount" placeholder="Enter amount of money to deposit">
            </div>

            <select class="custom-select mb-3 Currency">
                <option value="USD" selected>USD</option>
                <option value="EUR">EUR</option>
                <option value="GEL">GEL</option>
            </select>

            <input value="@UserManager.GetUserId(User)" class="invisible UserId"/>
            <br/>
            <button type="submit" class="btn btn-primary">Deposit</button>
        </form>
        <button type="submit" class="btn btn-primary deposit-btn">yay</button>
    }
    else
    {
        @Redirect("/")
    }
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script>
$(document).ready(() => {
    const successToast = Swal.mixin({
      toast: true,
      position: 'top-right',
      iconColor: 'green',
      customClass: {
        popup: 'colored-toast'
      },
      showConfirmButton: false,
      timer: 1500,
      timerProgressBar: true
    });
    
    const errorToast = Swal.mixin({
          toast: true,
          position: 'top-right',
          iconColor: 'red',
          customClass: {
            popup: 'colored-toast'
          },
          showConfirmButton: false,
          timer: 1500,
          timerProgressBar: true
    });
    
    $(".deposit-btn").on("click", () => {
        const transaction = {
           UserId: $(".UserId").val(),
           RecipientId: $(".RecipientId").val(),
           PaymentType: "Deposit",
           Amount: $(".Amount").val(),
           Currency: $(".Currency").val(),
           CreateDate: new Date(),
           Status: 0
       }
       
       let currencySign = "$";
        
       console.log(transaction);
       if (transaction.Currency === "GEL") currencySign = "₾";
       else if (transaction.Currency === "EUR") currencySign = "€";
                       
       $.ajax({
           type: 'POST',
           url: '/transactions/api/deposit',
           data: transaction,
           success: data => {
               console.log(data);
               if (data.success) {
                successToast.fire({
                    icon: 'success',
                    title: `Success! ${currencySign}${transaction.Amount} sent to the recipient.`
                });   
               } else {
                   errorToast.fire({
                       icon: 'error',
                       title: 'Failure'
                   });
               }
           }
       }); 
    });
});

</script>